import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

/**
 * 
 */

/**
 * @author Raja M
 *
 */
public class Predict {

	private static List<Integer> sequences = Arrays.asList(
			27,14,17,31,29,24,12,5,18,31,36,36,7,19,4,0,26,14,36,7,8,16,6,
			29,88,30,27,4,0,19,21,19,88,13,26,1,19,30,7,17,5,14,19,18,34,27,
			88,33,29,27,7,24,18,20,27,25,15,31,6,1,13,5,3,22,88,32,29,1,32,
			1,30,35,4,15,30,1,22,27,28,12,0,33,25,18,11,36,4,25,31,0,26,15,
			17,16,7,18,3,34,1,36,13,9,29,9,7,26,25,16,23,22,15,16,0,6,19,
			88,13,1,20,1,23,0,2,23,36,88,88,29,11,29,3,16,18,20,8,21,24,17,
			35,1,11,29,15,26,32,15,12,29,34,88,27,29,3,33,31,5,12,30,30,20,88,
			10,22,31,17,36,3,14,34,5,6,22,23,23,29,26,7,21,11,14,30,23,35,12,
			14,30,23,35,12,12,28,15,5,13,28,20,88,28,19,29,24,32,14,26,17,16,9,0,
			7,13,10,25,27,19,35,1,25,18,0,19,12,8,6,17,8,20,8,30,4,12,23,10,20,
			18,2,5,6,21,3,32,18,34,32,16,35,31,32,8,36,0,30,17,25,10,7,29,
			20,4,36,18,25,32,7,23,4,7,34,11,6,36,23,4,1,33,88,31,27,36,21,
			15,3,27,11,19,10,6,17,16,23,27,88,1,35,16,27,31,22,36,4,20,4,36,
			23,16,1,34,33,13,7,32,21,35,16,12,36,35,88,36,30,20,15,3,27,11,19,
			11,10,27,13,1,3,27,34,1,36,19,30,24,88,19,32,29,31,23,16,1,34,33,
			34,12,10,88,6,30,27,25,28,25,34,11,17,5,27,2,33,36,29,2,1,5,13,
			0,11,17,24,11,16,12,18,18,33,19,5,25,33,18,34,5,7,27,0,18,3,88,
			15,88,30,2,16,3,15,18,5,29,30,13,31,2,31,21,12,24,23,10,11,34,21,
			1,12,19,33,0,3,28,33,30,36,23,25,23,20,3,9,3,13,26,6,88,32,6,
			24,33,10,11,36,7,13,25,5,26,5,10,28,2,10,15,29,12,28,27,4,29,21,
			5,12,17,28,29,11,19,21,16,20,12,19,4,27,23,0,15,34,24,13,14,30,9,
			16,35,2,20,4,35,5,12,17,28,29,11,21,16,20,12,19,4,27,23,0,15,
			21,21,34,27,33,33,35,26,16,4,36,35,24,24,7,16,16,8,28,10,33,30,33,
			4,36,12,88,16,29,32,17,7,4,23,21,18,5,35,7,7,12,26,23,22,22,5,
			17,31,20,21,13,22,18,20,30,7,9,17,6,33,35,31,9,88,20,8,0,28,13,
			14,6,32,17,34,28,15,1,3,15,10,36,28,35,14,6,36,6,1,16,34,31,32,
			35,30,11,14,28,12,19,30,21,19,6,32,88,22,36,33,34,17,7,15,7,27,17,
			7,27,24,30,0,21,16,24,5,16,4,6,25,11,4,27,34,22,26,28,13,0,
			18,11,4,26,30,9,1,14,4,26,28,26,13,10,32,17,15,19,27,6,10,
			16,24,12,14,9,35,8,9,2,14,35,33,22,36,25,3,36,32,24,34,16,15,27,
			24,0,5,2,9,15,21,26,13,2,7,5,15,36,88,22,13,26,88,8,15,23,2,
			26,29,3,31,2,3,14,28,0,2,8,13,24,2,36,1,5,32,31,11,23,10,4,
			18,18,3,19,2,25,26,23,0,9,29,32,12,15,18,10,18,11,11,26,29,3,31,
			20,28,10,25,26,30,9,19,14,34,27,27,3,30,2,32,20,13,26,7,12,3,21,
			14,12,7,5,21,1,12,15,10,3,12,5,30,31,16,31,2,0,29,8,5,24,
			12,2,21,12,24,20,31,14,12,7,5,21,1,12,15,12,10,3,12,5,30,31,16,
			15,8,2,11,22,4,24,32,4,28,30,9,24,5,5,14,10,6,33,31,22,36,12,
			31,26,19,31,20,21,9,0,6,36,7,3,3,26,25,23,11,0,28,5,28,33,34,
			9,0,26,15,18,25,7,10,33,1,35,15,20,5,11,25,88,31,26,19,31,20,21,
			32,22,1,1,19,7,21,8,14,2,30,24,36,3,4,9,13,2,12,7,34,7,29,
			0,9,16,30,32,22,19,88,35,27,0,36,16,30,88,31,6,1,31,35,12,9,6,21,22,30,13,29,
			8,21,28,17,4,14,28,13,23,24,22,30,20,1,25,8,32,19,35,33,88,26,5,
			11,15,35,18,21,16,30,10,30,88,6,1,2,14,36,22,8,21,28,17,4,14,
			18,1,29,26,4,28,29,20,1,24,5,35,12,13,18,34,20,0,26,32,29,28,32,
			30,16,30,31,1,4,34,5,28,19,30,13,27,9,88,14,4,33,15,23,32,35,22,
			23,9,17,33,12,16,15,23,5,3,17,0,34,6,3,22,16,34,34,11,30,10,
			7,27,0,3,29,0,16,8,31,16,18,0,23,9,17,33,17,12,16,15,23,5,3,
			23,2,29,14,35,16,33,28,88,24,22,2,24,4,16,7,27,0,3,29,0,16,8,
			25,18,22,8,10,6,34,20,15,33,5,88,31,3,33,0,5,16,33,27,23,2,29,
			17,25,33,14,12,20,32,25,18,22,8,10,6,34,20,15,33,5,88,31,3,33,0,
			23,3,19,32,32,17,25,33,14,12,20,32,25,18,22,8,10,6,34,20,15,33,5,
			29,17,16,0,31,29,6,0,34,0,30,21,7,1,24,21,34,4,9,11,10,35,24,
			1,20,10,0,25,9,36,36,23,0,19,26,30,2,16,8,34,29,17,16,0,31,29
			
			);

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int find = 0;

		for (int i = 0; i <= 89; i++) {
			List<Integer> analysisData = getAnalysisData(i);
			LinkedHashMap<Object, Long> result = groupAndSort(analysisData);
		
			if(result.size()>0) {
				System.out.println(i + ":: " + result);
			}
		}
		//LinkedHashMap<Object, Long> sortedAfter = groupNumbers(after);
		//System.out.println("Analysis After List:"+ sortedAfter);
		
	}

	private static List<Integer> getAnalysisData(int find) {
		List<Integer> before = new ArrayList<Integer>();
		List<Integer> after = new ArrayList<Integer>();
		List<Integer> indexes = getIndexes(find);
		for (Integer index : indexes) {
			if (index + 1 < sequences.size()) {
				before.add(sequences.get(index + 1));
			}
			if (index - 1 >= 0) {
				before.add(sequences.get(index - 1));
				//after.add(sequences.get(index - 1));
			}
		}
		return before;
	}

	private static LinkedHashMap<Object, Long> groupAndSort(List<Integer> list) {
		Map<Object, Long> grouped = new TreeMap<Object, Long>(list.stream().collect(Collectors.groupingBy(e -> e, Collectors.counting())));
		LinkedHashMap<Object, Long> sorted = grouped.entrySet().stream()
				  .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				  .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1, e2) -> e1, LinkedHashMap::new));
		return sorted;
	}

	private static List<Integer> getIndexes(Integer num) {
		List<Integer> indexes = new ArrayList<Integer>();
		for (int i=0; i<sequences.size();i++) {
			if(sequences.get(i)==num) {
				indexes.add(i);
			}
		}
		return indexes;
	}
}
